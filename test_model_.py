# -*- coding: utf-8 -*-
"""Test Model .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OK6p9xndrgQiPxv7ATaD8VZiO7i7ltUl
"""

def focal_loss_fixed(y_true, y_pred):
    gamma = 2.0  # you can adjust gamma
    alpha = 0.25  # adjust alpha as well
    epsilon = tf.keras.backend.epsilon()
    y_pred = tf.clip_by_value(y_pred, epsilon, 1 - epsilon)
    cross_entropy = -y_true * tf.math.log(y_pred)
    modulating_factor = tf.pow(1 - y_pred, gamma)
    loss = alpha * modulating_factor * cross_entropy
    return tf.reduce_mean(tf.reduce_sum(loss, axis=-1))

import tensorflow as tf
from tensorflow.keras import backend as K

@tf.keras.utils.register_keras_serializable()
def focal_loss_fixed(y_true, y_pred, gamma=2.0, alpha=0.25):
    epsilon = K.epsilon()
    y_pred = tf.clip_by_value(y_pred, epsilon, 1. - epsilon)
    cross_entropy = -y_true * tf.math.log(y_pred)
    modulating_factor = tf.pow(1. - y_pred, gamma)
    loss = alpha * modulating_factor * cross_entropy
    return tf.reduce_mean(tf.reduce_sum(loss, axis=-1))

from keras.models import load_model

# โหลดโมเดล
model = load_model('my_model.keras', custom_objects={'focal_loss_fixed': focal_loss_fixed})

model.compile(optimizer='adam', loss=focal_loss_fixed, metrics=['accuracy'])

import numpy as np
from keras.models import load_model
from keras.preprocessing import image

# โหลดโมเดล
model = load_model('my_model.keras')

# เส้นทางของภาพที่ต้องการทดสอบ
test_image_paths = [
    '/images (1).jpg',
    '/images (2).jpg',
    '/Sample-skin-lesion-images-from-the-dataset-a-AKIEC-b-BCC-c-BKL-d-DF-e-MEL.png',
    '/bkl.jpg'

    # เพิ่มเส้นทางอื่นๆ ที่ต้องการทดสอบ
]

# ชนิดของมะเร็งผิวหนัง
# ชนิดของมะเร็งผิวหนัง
cancer_types = ['akiec', 'bcc', 'bkl', 'df', 'nv', 'mel', 'vasc']


for test_image_path in test_image_paths:
    # โหลดภาพ
    test_img = image.load_img(test_image_path, target_size=(128, 128))
    test_img_array = image.img_to_array(test_img)
    test_img_array = np.expand_dims(test_img_array, axis=0) / 255.0

    # ทำการพยากรณ์
    predictions = model.predict(test_img_array)
    predicted_class = np.argmax(predictions, axis=1)[0]
    prediction_confidences = predictions[0] * 100  # เปลี่ยนเป็นเปอร์เซ็นต์

    # แสดงผล
    print(f"Predicted class for {test_image_path}: {cancer_types[predicted_class]} ({prediction_confidences[predicted_class]:.2f}%)")
    print("All class probabilities:")
    for i, cancer_type in enumerate(cancer_types):
        print(f"  {cancer_type}: {prediction_confidences[i]:.2f}%")
    print("\n")  # เพื่อเว้นบรรทัดระหว่างผลลัพธ์ของแต่ละภาพ